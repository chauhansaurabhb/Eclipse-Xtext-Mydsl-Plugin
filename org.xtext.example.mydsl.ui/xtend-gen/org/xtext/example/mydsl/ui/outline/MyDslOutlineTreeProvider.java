/**
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.ui.outline;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.xtext.example.mydsl.myDsl.Actuator;
import org.xtext.example.mydsl.myDsl.ArchSpec;
import org.xtext.example.mydsl.myDsl.DeploymentSpec;
import org.xtext.example.mydsl.myDsl.Device;
import org.xtext.example.mydsl.myDsl.DeviceEntityName;
import org.xtext.example.mydsl.myDsl.EntityName;
import org.xtext.example.mydsl.myDsl.EventSensors;
import org.xtext.example.mydsl.myDsl.InBuiltComputationalService;
import org.xtext.example.mydsl.myDsl.InteractionName;
import org.xtext.example.mydsl.myDsl.InteractionSpec;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.PeriodicSensors;
import org.xtext.example.mydsl.myDsl.RequestSensors;
import org.xtext.example.mydsl.myDsl.StorageService;
import org.xtext.example.mydsl.myDsl.Struct;
import org.xtext.example.mydsl.myDsl.StructEntityName;
import org.xtext.example.mydsl.myDsl.Tags;
import org.xtext.example.mydsl.myDsl.VocSpec;
import org.xtext.example.mydsl.myDsl.customComputationalService;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
@SuppressWarnings("all")
public class MyDslOutlineTreeProvider extends DefaultOutlineTreeProvider {
  @Override
  protected void _createChildren(final DocumentRootNode parentNode, final EObject modelElement) {
    if ((modelElement instanceof Model)) {
      VocSpec _vocSpec = ((Model)modelElement).getVocSpec();
      boolean _notEquals = (!Objects.equal(_vocSpec, null));
      if (_notEquals) {
        final AbstractOutlineNode rootNode = new AbstractOutlineNode(parentNode, ((Image) null), "Domain Specification", false) {
        };
        final AbstractOutlineNode structNode = new AbstractOutlineNode(rootNode, ((Image) null), "Structures", false) {
        };
        VocSpec _vocSpec_1 = ((Model)modelElement).getVocSpec();
        EList<Struct> _structs = _vocSpec_1.getStructs();
        for (final Struct structInstances : _structs) {
          StructEntityName _name = structInstances.getName();
          this.createEObjectNode(structNode, _name);
        }
        final AbstractOutlineNode resourceNode = new AbstractOutlineNode(rootNode, ((Image) null), "Resources", false) {
        };
        final AbstractOutlineNode sensorNode = new AbstractOutlineNode(resourceNode, ((Image) null), "Sensors", false) {
        };
        final AbstractOutlineNode periodicNode = new AbstractOutlineNode(sensorNode, ((Image) null), "PeriodicSensors", false) {
        };
        VocSpec _vocSpec_2 = ((Model)modelElement).getVocSpec();
        EList<PeriodicSensors> _periodicSensors = _vocSpec_2.getPeriodicSensors();
        for (final PeriodicSensors periodicSensorInstances : _periodicSensors) {
          EntityName _sensorName = periodicSensorInstances.getSensorName();
          this.createEObjectNode(periodicNode, _sensorName);
        }
        final AbstractOutlineNode eventDrivenNode = new AbstractOutlineNode(sensorNode, ((Image) null), "EventDrivenSensors", false) {
        };
        VocSpec _vocSpec_3 = ((Model)modelElement).getVocSpec();
        EList<EventSensors> _eventSensors = _vocSpec_3.getEventSensors();
        for (final EventSensors eventDrivenSensorInstances : _eventSensors) {
          EntityName _sensorName_1 = eventDrivenSensorInstances.getSensorName();
          this.createEObjectNode(eventDrivenNode, _sensorName_1);
        }
        final AbstractOutlineNode requestBasedNode = new AbstractOutlineNode(sensorNode, ((Image) null), "RequestBasedSensors", false) {
        };
        VocSpec _vocSpec_4 = ((Model)modelElement).getVocSpec();
        EList<RequestSensors> _requestSensors = _vocSpec_4.getRequestSensors();
        for (final RequestSensors requestBasedSensorInstances : _requestSensors) {
          EntityName _sensorName_2 = requestBasedSensorInstances.getSensorName();
          this.createEObjectNode(requestBasedNode, _sensorName_2);
        }
        final AbstractOutlineNode tagNode = new AbstractOutlineNode(resourceNode, ((Image) null), "Tags", false) {
        };
        VocSpec _vocSpec_5 = ((Model)modelElement).getVocSpec();
        EList<Tags> _tags = _vocSpec_5.getTags();
        for (final Tags tagInstances : _tags) {
          EntityName _sensorName_3 = tagInstances.getSensorName();
          this.createEObjectNode(tagNode, _sensorName_3);
        }
        final AbstractOutlineNode actuatorNode = new AbstractOutlineNode(resourceNode, ((Image) null), "Actuators", false) {
        };
        VocSpec _vocSpec_6 = ((Model)modelElement).getVocSpec();
        EList<Actuator> _actuators = _vocSpec_6.getActuators();
        for (final Actuator actuatorInstances : _actuators) {
          EntityName _actuatorName = actuatorInstances.getActuatorName();
          this.createEObjectNode(actuatorNode, _actuatorName);
        }
        final AbstractOutlineNode storageNode = new AbstractOutlineNode(resourceNode, ((Image) null), "Storages", false) {
        };
        VocSpec _vocSpec_7 = ((Model)modelElement).getVocSpec();
        EList<StorageService> _storageService = _vocSpec_7.getStorageService();
        for (final StorageService storageInstances : _storageService) {
          EntityName _storageServiceName = storageInstances.getStorageServiceName();
          this.createEObjectNode(storageNode, _storageServiceName);
        }
      }
      ArchSpec _archSpec = ((Model)modelElement).getArchSpec();
      boolean _notEquals_1 = (!Objects.equal(_archSpec, null));
      if (_notEquals_1) {
        final AbstractOutlineNode rootNode_1 = new AbstractOutlineNode(parentNode, ((Image) null), "Arch Specification", false) {
        };
        final AbstractOutlineNode commonNode = new AbstractOutlineNode(rootNode_1, ((Image) null), "Common", false) {
        };
        ArchSpec _archSpec_1 = ((Model)modelElement).getArchSpec();
        EList<InBuiltComputationalService> _inbuiltComputationalService = _archSpec_1.getInbuiltComputationalService();
        for (final InBuiltComputationalService commonComponentInstances : _inbuiltComputationalService) {
          EntityName _inBuiltComputationalServiceName = commonComponentInstances.getInBuiltComputationalServiceName();
          this.createEObjectNode(commonNode, _inBuiltComputationalServiceName);
        }
        final AbstractOutlineNode customNode = new AbstractOutlineNode(rootNode_1, ((Image) null), "Custom", false) {
        };
        ArchSpec _archSpec_2 = ((Model)modelElement).getArchSpec();
        EList<customComputationalService> _customComputationalService = _archSpec_2.getCustomComputationalService();
        for (final customComputationalService customComponentInstances : _customComputationalService) {
          EntityName _customComputationalServiceName = customComponentInstances.getCustomComputationalServiceName();
          this.createEObjectNode(customNode, _customComputationalServiceName);
        }
      }
      InteractionSpec _interactionSpec = ((Model)modelElement).getInteractionSpec();
      boolean _notEquals_2 = (!Objects.equal(_interactionSpec, null));
      if (_notEquals_2) {
        final AbstractOutlineNode rootNode_2 = new AbstractOutlineNode(parentNode, ((Image) null), "User-Interaction Specification", false) {
        };
        final AbstractOutlineNode structNode_1 = new AbstractOutlineNode(rootNode_2, ((Image) null), "Structures", false) {
        };
        InteractionSpec _interactionSpec_1 = ((Model)modelElement).getInteractionSpec();
        EList<Struct> _structs_1 = _interactionSpec_1.getStructs();
        for (final Struct structInstances_1 : _structs_1) {
          StructEntityName _name_1 = structInstances_1.getName();
          this.createEObjectNode(structNode_1, _name_1);
        }
        final AbstractOutlineNode resourceNode_1 = new AbstractOutlineNode(rootNode_2, ((Image) null), "Resources", false) {
        };
        InteractionSpec _interactionSpec_2 = ((Model)modelElement).getInteractionSpec();
        EList<InteractionName> _interactionName = _interactionSpec_2.getInteractionName();
        for (final InteractionName resourceInstances : _interactionName) {
          EntityName _interactionName_1 = resourceInstances.getInteractionName();
          this.createEObjectNode(resourceNode_1, _interactionName_1);
        }
      }
      DeploymentSpec _networkSpec = ((Model)modelElement).getNetworkSpec();
      boolean _notEquals_3 = (!Objects.equal(_networkSpec, null));
      if (_notEquals_3) {
        final AbstractOutlineNode rootNode_3 = new AbstractOutlineNode(parentNode, ((Image) null), "Deploy Specification", false) {
        };
        final AbstractOutlineNode deviceNode = new AbstractOutlineNode(rootNode_3, ((Image) null), "Devices", false) {
        };
        DeploymentSpec _networkSpec_1 = ((Model)modelElement).getNetworkSpec();
        EList<Device> _devices = _networkSpec_1.getDevices();
        for (final Device deviceInstances : _devices) {
          DeviceEntityName _deviceName = deviceInstances.getDeviceName();
          this.createEObjectNode(deviceNode, _deviceName);
        }
      }
    }
  }
}
