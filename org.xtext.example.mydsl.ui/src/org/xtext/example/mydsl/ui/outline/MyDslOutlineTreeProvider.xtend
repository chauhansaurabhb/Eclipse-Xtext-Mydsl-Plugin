/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.ui.outline

import org.eclipse.emf.ecore.EObject
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.xtext.example.mydsl.myDsl.Model

/**
 * Customization of the default outline structure. 
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline 
 */
class MyDslOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	override protected _createChildren(DocumentRootNode parentNode, EObject modelElement) {
		
			
	if (modelElement instanceof Model) {
		
		// Following outline is for Vocab Specification
		if(modelElement.vocSpec!=null){
		     val rootNode = new AbstractOutlineNode(parentNode, null as Image, "Domain Specification", false) {}
			 val structNode = new AbstractOutlineNode(rootNode, null as Image, "Structures", false) {}	
			 
			 for ( structInstances : modelElement.vocSpec.structs) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(structNode, structInstances.name)
			 	  
			}  
			 val resourceNode = new AbstractOutlineNode(rootNode, null as Image, "Resources", false) {} 
			 val sensorNode = new AbstractOutlineNode(resourceNode, null as Image, "Sensors", false) {}
			 val periodicNode = new AbstractOutlineNode(sensorNode, null as Image, "PeriodicSensors", false) {}
			
			 for (periodicSensorInstances : modelElement.vocSpec.periodicSensors){
			 	
			 	createEObjectNode(periodicNode,periodicSensorInstances.sensorName)
			 }
			
			 val eventDrivenNode = new AbstractOutlineNode(sensorNode, null as Image, "EventDrivenSensors", false) {}
			 for (eventDrivenSensorInstances : modelElement.vocSpec.eventSensors){
			 	
			 	createEObjectNode(eventDrivenNode,eventDrivenSensorInstances.sensorName)
			 }
			 
			 
			 val requestBasedNode = new AbstractOutlineNode(sensorNode, null as Image, "RequestBasedSensors", false) {}
			 for (requestBasedSensorInstances : modelElement.vocSpec.requestSensors){
			 	
			 	createEObjectNode(requestBasedNode,requestBasedSensorInstances.sensorName)
			 }
			 
			 val tagNode = new AbstractOutlineNode(resourceNode, null as Image, "Tags", false) {}
			 
			 for (tagInstances : modelElement.vocSpec.tags){
			 	
			 	createEObjectNode(tagNode,tagInstances.sensorName)
			 }
			 val actuatorNode = new AbstractOutlineNode(resourceNode, null as Image, "Actuators", false) {}
			 
			 for (actuatorInstances : modelElement.vocSpec.actuators){
			 	
			 	createEObjectNode(actuatorNode,actuatorInstances.actuatorName)
			 }
			 val storageNode = new AbstractOutlineNode(resourceNode, null as Image, "Storages", false) {}	
			 for (storageInstances : modelElement.vocSpec.storageService){
			 	
			 	createEObjectNode(storageNode,storageInstances.storageServiceName)
			 }
			 		 
			//val gan = new AbstractOutlineNode(parentNode, null as Image, "Domain Specification", false) {}
			//val g = modelElement.vocSpec;			
			//createEObjectNode(gan, g)			
			//val ganOne = new AbstractOutlineNode(gan, null as Image, "Struct", true) {}
			//val gOne = modelElement.vocSpec.resourcesKeyword;
			//createEObjectNode(ganOne, gOne)
			
			}
			
			// Following outline is for Arch Specification
			if(modelElement.archSpec!=null){
				
				  val rootNode = new AbstractOutlineNode(parentNode, null as Image, "Arch Specification", false) {}
				   val commonNode = new AbstractOutlineNode(rootNode, null as Image, "Common", false) {}
				   
				   for ( commonComponentInstances : modelElement.archSpec.inbuiltComputationalService) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(commonNode,commonComponentInstances.inBuiltComputationalServiceName)
			     }
			      val customNode = new AbstractOutlineNode(rootNode, null as Image, "Custom", false) {} 
			      
			        for (customComponentInstances : modelElement.archSpec.customComputationalService) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(customNode,customComponentInstances.customComputationalServiceName)
			     }
				
			}
			
			// Following outline is for User Interaction Specification
			if(modelElement.interactionSpec!=null){
				
				  val rootNode = new AbstractOutlineNode(parentNode, null as Image, "User-Interaction Specification", false) {}
				   val structNode = new AbstractOutlineNode(rootNode, null as Image, "Structures", false) {}
				   
				for ( structInstances : modelElement.interactionSpec.structs) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(structNode,structInstances.name) 
			     }   
			       val resourceNode = new AbstractOutlineNode(rootNode, null as Image, "Resources", false) {} 
			      
		 		for (resourceInstances : modelElement.interactionSpec.interactionName) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(resourceNode,resourceInstances.interactionName)
			     }
			}
			
			
			// Following outline is for Deployment Specification
			if(modelElement.networkSpec!=null){
				
				  val rootNode = new AbstractOutlineNode(parentNode, null as Image, "Deploy Specification", false) {}
				   val deviceNode = new AbstractOutlineNode(rootNode, null as Image, "Devices", false) {}
				   
				 for (deviceInstances : modelElement.networkSpec.devices) {
			 	 //createEObjectNode(structNode, structInstances)
			 	 createEObjectNode(deviceNode,deviceInstances.deviceName)
			     }
			  }
			
			
		}	
		
		
	}
	
	
	
 
}
