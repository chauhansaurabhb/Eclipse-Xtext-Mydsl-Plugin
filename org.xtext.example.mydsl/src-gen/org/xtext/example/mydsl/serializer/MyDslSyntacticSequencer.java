/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArchSpec_CommonKeyword_2_0_a;
	protected AbstractElementAlias match_ArchSpec_CommonKeyword_2_0_p;
	protected AbstractElementAlias match_ArchSpec_CustomKeyword_3_0_a;
	protected AbstractElementAlias match_ArchSpec_CustomKeyword_3_0_p;
	protected AbstractElementAlias match_ArchSpec_StructsKeyword_0_0_q;
	protected AbstractElementAlias match_EventConditions___EqualsSignKeyword_1_2_or_GreaterThanSignKeyword_1_0_or_LessThanSignKeyword_1_1__a;
	protected AbstractElementAlias match_InteractionSpec_ResourcesKeyword_1_a;
	protected AbstractElementAlias match_InteractionSpec_ResourcesKeyword_1_p;
	protected AbstractElementAlias match_InteractionSpec_StructsKeyword_0_0_q;
	protected AbstractElementAlias match_InteractionSpec_UserInteractionsKeyword_2_0_q;
	protected AbstractElementAlias match_VocSpec_ActuatorsKeyword_8_0_q;
	protected AbstractElementAlias match_VocSpec_EventDrivenSensorsKeyword_5_0_q;
	protected AbstractElementAlias match_VocSpec_PeriodicSensorsKeyword_4_0_q;
	protected AbstractElementAlias match_VocSpec_RequestBasedSensorsKeyword_6_0_q;
	protected AbstractElementAlias match_VocSpec_StoragesKeyword_9_0_q;
	protected AbstractElementAlias match_VocSpec_TagsKeyword_7_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_ArchSpec_CommonKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getArchSpecAccess().getCommonKeyword_2_0());
		match_ArchSpec_CommonKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getArchSpecAccess().getCommonKeyword_2_0());
		match_ArchSpec_CustomKeyword_3_0_a = new TokenAlias(true, true, grammarAccess.getArchSpecAccess().getCustomKeyword_3_0());
		match_ArchSpec_CustomKeyword_3_0_p = new TokenAlias(true, false, grammarAccess.getArchSpecAccess().getCustomKeyword_3_0());
		match_ArchSpec_StructsKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getArchSpecAccess().getStructsKeyword_0_0());
		match_EventConditions___EqualsSignKeyword_1_2_or_GreaterThanSignKeyword_1_0_or_LessThanSignKeyword_1_1__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getEventConditionsAccess().getEqualsSignKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getEventConditionsAccess().getGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getEventConditionsAccess().getLessThanSignKeyword_1_1()));
		match_InteractionSpec_ResourcesKeyword_1_a = new TokenAlias(true, true, grammarAccess.getInteractionSpecAccess().getResourcesKeyword_1());
		match_InteractionSpec_ResourcesKeyword_1_p = new TokenAlias(true, false, grammarAccess.getInteractionSpecAccess().getResourcesKeyword_1());
		match_InteractionSpec_StructsKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getInteractionSpecAccess().getStructsKeyword_0_0());
		match_InteractionSpec_UserInteractionsKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getInteractionSpecAccess().getUserInteractionsKeyword_2_0());
		match_VocSpec_ActuatorsKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getActuatorsKeyword_8_0());
		match_VocSpec_EventDrivenSensorsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getEventDrivenSensorsKeyword_5_0());
		match_VocSpec_PeriodicSensorsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getPeriodicSensorsKeyword_4_0());
		match_VocSpec_RequestBasedSensorsKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getRequestBasedSensorsKeyword_6_0());
		match_VocSpec_StoragesKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getStoragesKeyword_9_0());
		match_VocSpec_TagsKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getVocSpecAccess().getTagsKeyword_7_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArchSpec_CommonKeyword_2_0_a.equals(syntax))
				emit_ArchSpec_CommonKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArchSpec_CommonKeyword_2_0_p.equals(syntax))
				emit_ArchSpec_CommonKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArchSpec_CustomKeyword_3_0_a.equals(syntax))
				emit_ArchSpec_CustomKeyword_3_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArchSpec_CustomKeyword_3_0_p.equals(syntax))
				emit_ArchSpec_CustomKeyword_3_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArchSpec_StructsKeyword_0_0_q.equals(syntax))
				emit_ArchSpec_StructsKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EventConditions___EqualsSignKeyword_1_2_or_GreaterThanSignKeyword_1_0_or_LessThanSignKeyword_1_1__a.equals(syntax))
				emit_EventConditions___EqualsSignKeyword_1_2_or_GreaterThanSignKeyword_1_0_or_LessThanSignKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InteractionSpec_ResourcesKeyword_1_a.equals(syntax))
				emit_InteractionSpec_ResourcesKeyword_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InteractionSpec_ResourcesKeyword_1_p.equals(syntax))
				emit_InteractionSpec_ResourcesKeyword_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InteractionSpec_StructsKeyword_0_0_q.equals(syntax))
				emit_InteractionSpec_StructsKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InteractionSpec_UserInteractionsKeyword_2_0_q.equals(syntax))
				emit_InteractionSpec_UserInteractionsKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_ActuatorsKeyword_8_0_q.equals(syntax))
				emit_VocSpec_ActuatorsKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_EventDrivenSensorsKeyword_5_0_q.equals(syntax))
				emit_VocSpec_EventDrivenSensorsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_PeriodicSensorsKeyword_4_0_q.equals(syntax))
				emit_VocSpec_PeriodicSensorsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_RequestBasedSensorsKeyword_6_0_q.equals(syntax))
				emit_VocSpec_RequestBasedSensorsKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_StoragesKeyword_9_0_q.equals(syntax))
				emit_VocSpec_StoragesKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VocSpec_TagsKeyword_7_0_q.equals(syntax))
				emit_VocSpec_TagsKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Common:'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'computationalService:' (ambiguity) 'Custom:'* (rule start)
	 *     (rule start) 'computationalService:' (ambiguity) 'Custom:'+ customComputationalService+=customComputationalService
	 *     inbuiltComputationalService+=InBuiltComputationalService (ambiguity) 'Custom:'* (rule end)
	 *     inbuiltComputationalService+=InBuiltComputationalService (ambiguity) 'Custom:'+ customComputationalService+=customComputationalService
	 *     inbuiltComputationalService+=InBuiltComputationalService (ambiguity) inbuiltComputationalService+=InBuiltComputationalService
	 *     structs+=Struct 'computationalService:' (ambiguity) 'Custom:'* (rule end)
	 *     structs+=Struct 'computationalService:' (ambiguity) 'Custom:'+ customComputationalService+=customComputationalService
	 */
	protected void emit_ArchSpec_CommonKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Common:'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'computationalService:' (ambiguity) inbuiltComputationalService+=InBuiltComputationalService
	 *     structs+=Struct 'computationalService:' (ambiguity) inbuiltComputationalService+=InBuiltComputationalService
	 */
	protected void emit_ArchSpec_CommonKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Custom:'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'computationalService:' 'Common:'* (ambiguity) (rule start)
	 *     customComputationalService+=customComputationalService (ambiguity) (rule end)
	 *     customComputationalService+=customComputationalService (ambiguity) customComputationalService+=customComputationalService
	 *     inbuiltComputationalService+=InBuiltComputationalService 'Common:'* (ambiguity) (rule end)
	 *     structs+=Struct 'computationalService:' 'Common:'* (ambiguity) (rule end)
	 */
	protected void emit_ArchSpec_CustomKeyword_3_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Custom:'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'computationalService:' 'Common:'* (ambiguity) customComputationalService+=customComputationalService
	 *     inbuiltComputationalService+=InBuiltComputationalService 'Common:'* (ambiguity) customComputationalService+=customComputationalService
	 *     structs+=Struct 'computationalService:' 'Common:'* (ambiguity) customComputationalService+=customComputationalService
	 */
	protected void emit_ArchSpec_CustomKeyword_3_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'structs:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     structs+=Struct (ambiguity) structs+=Struct
	 */
	protected void emit_ArchSpec_StructsKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('>' | '<' | '=')*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) intValue=INT
	 */
	protected void emit_EventConditions___EqualsSignKeyword_1_2_or_GreaterThanSignKeyword_1_0_or_LessThanSignKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'resources:'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'userInteractions:' interactionName+=InteractionName
	 *     (rule start) (ambiguity) (rule start)
	 *     structs+=Struct (ambiguity) 'userInteractions:' interactionName+=InteractionName
	 *     structs+=Struct (ambiguity) (rule end)
	 */
	protected void emit_InteractionSpec_ResourcesKeyword_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'resources:'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_InteractionSpec_ResourcesKeyword_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'structs:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     structs+=Struct (ambiguity) structs+=Struct
	 */
	protected void emit_InteractionSpec_StructsKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'userInteractions:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     interactionName+=InteractionName (ambiguity) interactionName+=InteractionName
	 */
	protected void emit_InteractionSpec_UserInteractionsKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'actuators:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     actuators+=Actuator (ambiguity) actuators+=Actuator
	 */
	protected void emit_VocSpec_ActuatorsKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'eventDrivenSensors:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     eventSensors+=EventSensors (ambiguity) eventSensors+=EventSensors
	 */
	protected void emit_VocSpec_EventDrivenSensorsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'periodicSensors:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     periodicSensors+=PeriodicSensors (ambiguity) periodicSensors+=PeriodicSensors
	 */
	protected void emit_VocSpec_PeriodicSensorsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'requestBasedSensors:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     requestSensors+=RequestSensors (ambiguity) requestSensors+=RequestSensors
	 */
	protected void emit_VocSpec_RequestBasedSensorsKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'storages:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     storageService+=StorageService (ambiguity) storageService+=StorageService
	 */
	protected void emit_VocSpec_StoragesKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'tags:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Tags (ambiguity) tags+=Tags
	 */
	protected void emit_VocSpec_TagsKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
