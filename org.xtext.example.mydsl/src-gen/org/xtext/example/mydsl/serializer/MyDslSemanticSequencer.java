/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.ActionName;
import org.xtext.example.mydsl.myDsl.Actuator;
import org.xtext.example.mydsl.myDsl.ArchSpec;
import org.xtext.example.mydsl.myDsl.Command;
import org.xtext.example.mydsl.myDsl.CommandParameter;
import org.xtext.example.mydsl.myDsl.ComputeInfoForInBuilt;
import org.xtext.example.mydsl.myDsl.Consume;
import org.xtext.example.mydsl.myDsl.ConsumeForInBuilt;
import org.xtext.example.mydsl.myDsl.DataAccess;
import org.xtext.example.mydsl.myDsl.DataAccessForRequestSensors;
import org.xtext.example.mydsl.myDsl.DatabaseName;
import org.xtext.example.mydsl.myDsl.DeploymentSpec;
import org.xtext.example.mydsl.myDsl.Device;
import org.xtext.example.mydsl.myDsl.DeviceAbilities;
import org.xtext.example.mydsl.myDsl.DeviceDescription;
import org.xtext.example.mydsl.myDsl.DeviceEntityName;
import org.xtext.example.mydsl.myDsl.DeviceLocation;
import org.xtext.example.mydsl.myDsl.DeviceProtocol;
import org.xtext.example.mydsl.myDsl.EntityName;
import org.xtext.example.mydsl.myDsl.EventConditions;
import org.xtext.example.mydsl.myDsl.EventSensors;
import org.xtext.example.mydsl.myDsl.Field;
import org.xtext.example.mydsl.myDsl.Generate;
import org.xtext.example.mydsl.myDsl.InBuiltComputationalService;
import org.xtext.example.mydsl.myDsl.InteractionAction;
import org.xtext.example.mydsl.myDsl.InteractionName;
import org.xtext.example.mydsl.myDsl.InteractionSpec;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OPERATOR;
import org.xtext.example.mydsl.myDsl.OnConditionDef;
import org.xtext.example.mydsl.myDsl.OperationName;
import org.xtext.example.mydsl.myDsl.ParameterName;
import org.xtext.example.mydsl.myDsl.Parameters;
import org.xtext.example.mydsl.myDsl.PeriodicSensors;
import org.xtext.example.mydsl.myDsl.PlatformType;
import org.xtext.example.mydsl.myDsl.PrimitiveDataType;
import org.xtext.example.mydsl.myDsl.Request;
import org.xtext.example.mydsl.myDsl.RequestSensors;
import org.xtext.example.mydsl.myDsl.SourceName;
import org.xtext.example.mydsl.myDsl.StorageService;
import org.xtext.example.mydsl.myDsl.Struct;
import org.xtext.example.mydsl.myDsl.StructEntityName;
import org.xtext.example.mydsl.myDsl.Tags;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.Unit;
import org.xtext.example.mydsl.myDsl.VocSpec;
import org.xtext.example.mydsl.myDsl.customComputationalService;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ACTION:
				sequence_Action(context, (org.xtext.example.mydsl.myDsl.Action) semanticObject); 
				return; 
			case MyDslPackage.ACTION_NAME:
				sequence_ActionName(context, (ActionName) semanticObject); 
				return; 
			case MyDslPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case MyDslPackage.ARCH_SPEC:
				sequence_ArchSpec(context, (ArchSpec) semanticObject); 
				return; 
			case MyDslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case MyDslPackage.COMMAND_PARAMETER:
				sequence_CommandParameter(context, (CommandParameter) semanticObject); 
				return; 
			case MyDslPackage.COMPUTE_INFO_FOR_IN_BUILT:
				sequence_ComputeInfoForInBuilt(context, (ComputeInfoForInBuilt) semanticObject); 
				return; 
			case MyDslPackage.CONSUME:
				sequence_Consume(context, (Consume) semanticObject); 
				return; 
			case MyDslPackage.CONSUME_FOR_IN_BUILT:
				sequence_ConsumeForInBuilt(context, (ConsumeForInBuilt) semanticObject); 
				return; 
			case MyDslPackage.DATA_ACCESS:
				sequence_DataAccess(context, (DataAccess) semanticObject); 
				return; 
			case MyDslPackage.DATA_ACCESS_FOR_REQUEST_SENSORS:
				sequence_DataAccessForRequestSensors(context, (DataAccessForRequestSensors) semanticObject); 
				return; 
			case MyDslPackage.DATABASE_NAME:
				sequence_DatabaseName(context, (DatabaseName) semanticObject); 
				return; 
			case MyDslPackage.DEPLOYMENT_SPEC:
				sequence_DeploymentSpec(context, (DeploymentSpec) semanticObject); 
				return; 
			case MyDslPackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case MyDslPackage.DEVICE_ABILITIES:
				sequence_DeviceAbilities(context, (DeviceAbilities) semanticObject); 
				return; 
			case MyDslPackage.DEVICE_DESCRIPTION:
				sequence_DeviceDescription(context, (DeviceDescription) semanticObject); 
				return; 
			case MyDslPackage.DEVICE_ENTITY_NAME:
				sequence_DeviceEntityName(context, (DeviceEntityName) semanticObject); 
				return; 
			case MyDslPackage.DEVICE_LOCATION:
				sequence_DeviceLocation(context, (DeviceLocation) semanticObject); 
				return; 
			case MyDslPackage.DEVICE_PROTOCOL:
				sequence_DeviceProtocol(context, (DeviceProtocol) semanticObject); 
				return; 
			case MyDslPackage.ENTITY_NAME:
				sequence_EntityName(context, (EntityName) semanticObject); 
				return; 
			case MyDslPackage.EVENT_CONDITIONS:
				sequence_EventConditions(context, (EventConditions) semanticObject); 
				return; 
			case MyDslPackage.EVENT_SENSORS:
				sequence_EventSensors(context, (EventSensors) semanticObject); 
				return; 
			case MyDslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case MyDslPackage.GENERATE:
				sequence_Generate(context, (Generate) semanticObject); 
				return; 
			case MyDslPackage.IN_BUILT_COMPUTATIONAL_SERVICE:
				sequence_InBuiltComputationalService(context, (InBuiltComputationalService) semanticObject); 
				return; 
			case MyDslPackage.INTERACTION_ACTION:
				sequence_InteractionAction(context, (InteractionAction) semanticObject); 
				return; 
			case MyDslPackage.INTERACTION_NAME:
				sequence_InteractionName(context, (InteractionName) semanticObject); 
				return; 
			case MyDslPackage.INTERACTION_SPEC:
				sequence_InteractionSpec(context, (InteractionSpec) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OPERATOR:
				sequence_OPERATOR(context, (OPERATOR) semanticObject); 
				return; 
			case MyDslPackage.ON_CONDITION_DEF:
				sequence_OnConditionDef(context, (OnConditionDef) semanticObject); 
				return; 
			case MyDslPackage.OPERATION_NAME:
				sequence_OperationName(context, (OperationName) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER_NAME:
				sequence_ParameterName(context, (ParameterName) semanticObject); 
				return; 
			case MyDslPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case MyDslPackage.PERIODIC_SENSORS:
				sequence_PeriodicSensors(context, (PeriodicSensors) semanticObject); 
				return; 
			case MyDslPackage.PLATFORM_TYPE:
				sequence_PlatformType(context, (PlatformType) semanticObject); 
				return; 
			case MyDslPackage.PRIMITIVE_DATA_TYPE:
				sequence_PrimitiveDataType(context, (PrimitiveDataType) semanticObject); 
				return; 
			case MyDslPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case MyDslPackage.REQUEST_SENSORS:
				sequence_RequestSensors(context, (RequestSensors) semanticObject); 
				return; 
			case MyDslPackage.SOURCE_NAME:
				sequence_SourceName(context, (SourceName) semanticObject); 
				return; 
			case MyDslPackage.STORAGE_SERVICE:
				sequence_StorageService(context, (StorageService) semanticObject); 
				return; 
			case MyDslPackage.STRUCT:
				sequence_Struct(context, (Struct) semanticObject); 
				return; 
			case MyDslPackage.STRUCT_ENTITY_NAME:
				sequence_StructEntityName(context, (StructEntityName) semanticObject); 
				return; 
			case MyDslPackage.TAGS:
				sequence_Tags(context, (Tags) semanticObject); 
				return; 
			case MyDslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case MyDslPackage.UNIT:
				sequence_Unit(context, (Unit) semanticObject); 
				return; 
			case MyDslPackage.VOC_SPEC:
				sequence_VocSpec(context, (VocSpec) semanticObject); 
				return; 
			case MyDslPackage.CUSTOM_COMPUTATIONAL_SERVICE:
				sequence_customComputationalService(context, (customComputationalService) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionName returns ActionName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ActionName(ISerializationContext context, ActionName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ACTION_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ACTION_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actionName=ActionName parameters+=Parameters*)
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.example.mydsl.myDsl.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (actuatorName=EntityName actions+=Action*)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchSpec returns ArchSpec
	 *
	 * Constraint:
	 *     (structs+=Struct* inbuiltComputationalService+=InBuiltComputationalService* customComputationalService+=customComputationalService*)
	 */
	protected void sequence_ArchSpec(ISerializationContext context, ArchSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandParameter returns CommandParameter
	 *
	 * Constraint:
	 *     (name=[ParameterName|ID] parameter=CommandParameter?)
	 */
	protected void sequence_CommandParameter(ISerializationContext context, CommandParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (commandName=[ActionName|ID] commandparameter=CommandParameter? actuatorForCommand=[EntityName|ID])
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComputeInfoForInBuilt returns ComputeInfoForInBuilt
	 *
	 * Constraint:
	 *     (operationName=OperationName operationParameter=INT?)
	 */
	protected void sequence_ComputeInfoForInBuilt(ISerializationContext context, ComputeInfoForInBuilt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConsumeForInBuilt returns ConsumeForInBuilt
	 *
	 * Constraint:
	 *     (name=[SourceName|ID] SensorForConsume=[EntityName|ID])
	 */
	protected void sequence_ConsumeForInBuilt(ISerializationContext context, ConsumeForInBuilt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONSUME_FOR_IN_BUILT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONSUME_FOR_IN_BUILT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONSUME_FOR_IN_BUILT__SENSOR_FOR_CONSUME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONSUME_FOR_IN_BUILT__SENSOR_FOR_CONSUME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConsumeForInBuiltAccess().getNameSourceNameIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.accept(grammarAccess.getConsumeForInBuiltAccess().getSensorForConsumeEntityNameIDTerminalRuleCall_3_0_1(), semanticObject.getSensorForConsume());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Consume returns Consume
	 *
	 * Constraint:
	 *     (name=[SourceName|ID] fromName=[EntityName|ID])
	 */
	protected void sequence_Consume(ISerializationContext context, Consume semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONSUME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONSUME__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONSUME__FROM_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONSUME__FROM_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConsumeAccess().getNameSourceNameIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.accept(grammarAccess.getConsumeAccess().getFromNameEntityNameIDTerminalRuleCall_3_0_1(), semanticObject.getFromName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataAccessForRequestSensors returns DataAccessForRequestSensors
	 *
	 * Constraint:
	 *     (sourceName=SourceName dataAccessType=Type dataItem=ID type=Type)
	 */
	protected void sequence_DataAccessForRequestSensors(ISerializationContext context, DataAccessForRequestSensors semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__SOURCE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__SOURCE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__DATA_ACCESS_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__DATA_ACCESS_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__DATA_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__DATA_ITEM));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATA_ACCESS_FOR_REQUEST_SENSORS__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataAccessForRequestSensorsAccess().getSourceNameSourceNameParserRuleCall_1_0(), semanticObject.getSourceName());
		feeder.accept(grammarAccess.getDataAccessForRequestSensorsAccess().getDataAccessTypeTypeParserRuleCall_3_0(), semanticObject.getDataAccessType());
		feeder.accept(grammarAccess.getDataAccessForRequestSensorsAccess().getDataItemIDTerminalRuleCall_5_0(), semanticObject.getDataItem());
		feeder.accept(grammarAccess.getDataAccessForRequestSensorsAccess().getTypeTypeParserRuleCall_7_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataAccess returns DataAccess
	 *
	 * Constraint:
	 *     (sourceName=SourceName dataAccessType=Type dataItem=ID type=Type actions+=Action*)
	 */
	protected void sequence_DataAccess(ISerializationContext context, DataAccess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DatabaseName returns DatabaseName
	 *
	 * Constraint:
	 *     (installedDatabase='MySQL' | installedDatabase='SQLAzure' | installedDatabase='MongoDB')
	 */
	protected void sequence_DatabaseName(ISerializationContext context, DatabaseName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeploymentSpec returns DeploymentSpec
	 *
	 * Constraint:
	 *     devices+=Device+
	 */
	protected void sequence_DeploymentSpec(ISerializationContext context, DeploymentSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeviceAbilities returns DeviceAbilities
	 *
	 * Constraint:
	 *     (deviceEntityName=[EntityName|ID] name=DeviceAbilities?)
	 */
	protected void sequence_DeviceAbilities(ISerializationContext context, DeviceAbilities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeviceDescription returns DeviceDescription
	 *
	 * Constraint:
	 *     devicedescriptionText=STRING
	 */
	protected void sequence_DeviceDescription(ISerializationContext context, DeviceDescription semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEVICE_DESCRIPTION__DEVICEDESCRIPTION_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEVICE_DESCRIPTION__DEVICEDESCRIPTION_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceDescriptionAccess().getDevicedescriptionTextSTRINGTerminalRuleCall_0(), semanticObject.getDevicedescriptionText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeviceEntityName returns DeviceEntityName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DeviceEntityName(ISerializationContext context, DeviceEntityName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEVICE_ENTITY_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEVICE_ENTITY_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceEntityNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeviceLocation returns DeviceLocation
	 *
	 * Constraint:
	 *     (regionLabel=ID regionValue=INT)
	 */
	protected void sequence_DeviceLocation(ISerializationContext context, DeviceLocation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEVICE_LOCATION__REGION_LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEVICE_LOCATION__REGION_LABEL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEVICE_LOCATION__REGION_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEVICE_LOCATION__REGION_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceLocationAccess().getRegionLabelIDTerminalRuleCall_0_0(), semanticObject.getRegionLabel());
		feeder.accept(grammarAccess.getDeviceLocationAccess().getRegionValueINTTerminalRuleCall_2_0(), semanticObject.getRegionValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeviceProtocol returns DeviceProtocol
	 *
	 * Constraint:
	 *     protocolName='mqtt'
	 */
	protected void sequence_DeviceProtocol(ISerializationContext context, DeviceProtocol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEVICE_PROTOCOL__PROTOCOL_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEVICE_PROTOCOL__PROTOCOL_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceProtocolAccess().getProtocolNameMqttKeyword_0(), semanticObject.getProtocolName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (
	 *         deviceName=DeviceEntityName 
	 *         deviceLocation+=DeviceLocation 
	 *         platformType+=PlatformType 
	 *         deviceAbilities+=DeviceAbilities? 
	 *         deviceProtocol+=DeviceProtocol 
	 *         databaseName+=DatabaseName*
	 *     )
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityName returns EntityName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EntityName(ISerializationContext context, EntityName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ENTITY_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ENTITY_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventConditions returns EventConditions
	 *
	 * Constraint:
	 *     (name=ID intValue=INT nameUnit=Unit eventConditions+=EventConditions?)
	 */
	protected void sequence_EventConditions(ISerializationContext context, EventConditions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventSensors returns EventSensors
	 *
	 * Constraint:
	 *     (sensorName=EntityName generateInfo+=Generate+ onConditionDef=OnConditionDef)
	 */
	protected void sequence_EventSensors(ISerializationContext context, EventSensors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=ID type+=Type)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generate returns Generate
	 *
	 * Constraint:
	 *     (sourceName=SourceName type=Type)
	 */
	protected void sequence_Generate(ISerializationContext context, Generate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GENERATE__SOURCE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GENERATE__SOURCE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GENERATE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GENERATE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGenerateAccess().getSourceNameSourceNameParserRuleCall_1_0(), semanticObject.getSourceName());
		feeder.accept(grammarAccess.getGenerateAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InBuiltComputationalService returns InBuiltComputationalService
	 *
	 * Constraint:
	 *     (inBuiltComputationalServiceName=EntityName consumes+=ConsumeForInBuilt+ computeInfo+=ComputeInfoForInBuilt+ generateInfo+=Generate+)
	 */
	protected void sequence_InBuiltComputationalService(ISerializationContext context, InBuiltComputationalService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionAction returns InteractionAction
	 *
	 * Constraint:
	 *     (actionName=ActionName parameters+=Parameters* interactionEntity=[EntityName|ID])
	 */
	protected void sequence_InteractionAction(ISerializationContext context, InteractionAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionName returns InteractionName
	 *
	 * Constraint:
	 *     (interactionName=EntityName interactionCommand+=Command* interactionRequest+=Request* interactionNotify+=InteractionAction*)
	 */
	protected void sequence_InteractionName(ISerializationContext context, InteractionName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionSpec returns InteractionSpec
	 *
	 * Constraint:
	 *     (structs+=Struct* interactionName+=InteractionName*)
	 */
	protected void sequence_InteractionSpec(ISerializationContext context, InteractionSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (vocSpec=VocSpec | interactionSpec=InteractionSpec | archSpec=ArchSpec | networkSpec=DeploymentSpec)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OPERATOR returns OPERATOR
	 *
	 * Constraint:
	 *     (opt='>' | opt='<' | opt='=')
	 */
	protected void sequence_OPERATOR(ISerializationContext context, OPERATOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OnConditionDef returns OnConditionDef
	 *
	 * Constraint:
	 *     eventConditions+=EventConditions
	 */
	protected void sequence_OnConditionDef(ISerializationContext context, OnConditionDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationName returns OperationName
	 *
	 * Constraint:
	 *     name='AVG_BY_SAMPLE'
	 */
	protected void sequence_OperationName(ISerializationContext context, OperationName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPERATION_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPERATION_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationNameAccess().getNameAVG_BY_SAMPLEKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterName returns ParameterName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ParameterName(ISerializationContext context, ParameterName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETER_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETER_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (parameterName=ParameterName type=Type)
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETERS__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETERS__PARAMETER_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETERS__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETERS__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParametersAccess().getParameterNameParameterNameParserRuleCall_0_0(), semanticObject.getParameterName());
		feeder.accept(grammarAccess.getParametersAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PeriodicSensors returns PeriodicSensors
	 *
	 * Constraint:
	 *     (sensorName=EntityName generateInfo+=Generate+ sampelingDef=SampelingDef)
	 */
	protected void sequence_PeriodicSensors(ISerializationContext context, PeriodicSensors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlatformType returns PlatformType
	 *
	 * Constraint:
	 *     (deviceType='JavaSE' | deviceType='Android' | deviceType='NodeJS')
	 */
	protected void sequence_PlatformType(ISerializationContext context, PlatformType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveDataType returns PrimitiveDataType
	 *
	 * Constraint:
	 *     (
	 *         INTEGER='Integer' | 
	 *         BOOLEAN='boolean' | 
	 *         STRING='String' | 
	 *         LONG='long' | 
	 *         DOUBLE='double' | 
	 *         structDef=[StructEntityName|ID]
	 *     )
	 */
	protected void sequence_PrimitiveDataType(ISerializationContext context, PrimitiveDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequestSensors returns RequestSensors
	 *
	 * Constraint:
	 *     (sensorName=EntityName dataAccess+=DataAccessForRequestSensors+)
	 */
	protected void sequence_RequestSensors(ISerializationContext context, RequestSensors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (requestname=[SourceName|ID] storageForRequest=[EntityName|ID])
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REQUEST__REQUESTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REQUEST__REQUESTNAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REQUEST__STORAGE_FOR_REQUEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REQUEST__STORAGE_FOR_REQUEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestAccess().getRequestnameSourceNameIDTerminalRuleCall_1_0_1(), semanticObject.getRequestname());
		feeder.accept(grammarAccess.getRequestAccess().getStorageForRequestEntityNameIDTerminalRuleCall_3_0_1(), semanticObject.getStorageForRequest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SourceName returns SourceName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SourceName(ISerializationContext context, SourceName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SOURCE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SOURCE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSourceNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StorageService returns StorageService
	 *
	 * Constraint:
	 *     (storageServiceName=EntityName dataAccesses+=DataAccess*)
	 */
	protected void sequence_StorageService(ISerializationContext context, StorageService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructEntityName returns StructEntityName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StructEntityName(ISerializationContext context, StructEntityName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STRUCT_ENTITY_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STRUCT_ENTITY_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStructEntityNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Struct returns Struct
	 *
	 * Constraint:
	 *     (name=StructEntityName fields+=Field+)
	 */
	protected void sequence_Struct(ISerializationContext context, Struct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tags returns Tags
	 *
	 * Constraint:
	 *     (sensorName=EntityName generateInfo+=Generate+)
	 */
	protected void sequence_Tags(ISerializationContext context, Tags semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     primitiveDataType=PrimitiveDataType
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE__PRIMITIVE_DATA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE__PRIMITIVE_DATA_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getPrimitiveDataTypePrimitiveDataTypeParserRuleCall_0(), semanticObject.getPrimitiveDataType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Unit returns Unit
	 *
	 * Constraint:
	 *     (name='PPM' | name='miliseconds' | name='seconds' | name='minutes' | name='ppm')
	 */
	protected void sequence_Unit(ISerializationContext context, Unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VocSpec returns VocSpec
	 *
	 * Constraint:
	 *     (
	 *         structs+=Struct* 
	 *         periodicSensors+=PeriodicSensors* 
	 *         eventSensors+=EventSensors* 
	 *         requestSensors+=RequestSensors* 
	 *         tags+=Tags* 
	 *         actuators+=Actuator* 
	 *         storageService+=StorageService*
	 *     )
	 */
	protected void sequence_VocSpec(ISerializationContext context, VocSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     customComputationalService returns customComputationalService
	 *
	 * Constraint:
	 *     (customComputationalServiceName=EntityName consumes+=Consume+ requests+=Request* generateInfo+=Generate* commands+=Command*)
	 */
	protected void sequence_customComputationalService(ISerializationContext context, customComputationalService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
