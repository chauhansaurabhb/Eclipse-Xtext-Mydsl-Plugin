grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:
	(vocSpec=VocSpec | interactionSpec=InteractionSpec | archSpec=ArchSpec | networkSpec=DeploymentSpec);
 
DeploymentSpec:
	 'devices:'
	  (devices+=Device)*;	 

Device:
	deviceName= DeviceEntityName ':' 
	'location:' (deviceLocation+=DeviceLocation) ';'
	'platform:' (platformType+=PlatformType) ';'
	'resources:' (deviceAbilities+=DeviceAbilities)? ';'
    'protocol:' (deviceProtocol+=DeviceProtocol) ';'
	('database:' databaseName+=DatabaseName ';')*;
 
DeviceDescription:
	devicedescriptionText=STRING;

DeviceLocation:
	regionLabel=ID ':' regionValue=INT ;

PlatformType:
	deviceType='JavaSE' | deviceType='Android' | deviceType='NodeJS';

DatabaseName:
	installedDatabase='MySQL' | installedDatabase='SQLAzure' | installedDatabase='MongoDB';

DeviceProtocol:
	protocolName='mqtt' ;

DeviceAbilities:
	deviceEntityName=[EntityName] (',' name=DeviceAbilities)?;

InteractionSpec: 
    ('structs:' (structs+=Struct)+)*
	('resources:')*
	('userInteractions:' (interactionName+=InteractionName)+)*			
	;

 
InteractionName:
	interactionName=EntityName 
	 (interactionCommand+=Command)*
	(interactionRequest+=Request)*  
	(interactionNotify+=InteractionAction)*;

InteractionAction:
	'notify' actionName=ActionName '(' (parameters+=Parameters)* ')' 'from' interactionEntity=[EntityName] ';';

ArchSpec:
	('structs:' (structs+=Struct)+)*
	'computationalService:'
	('Common:' (inbuiltComputationalService+=InBuiltComputationalService)*)*
	('Custom:' (customComputationalService+=customComputationalService)*)*;

InBuiltComputationalService:
	inBuiltComputationalServiceName=EntityName
	(consumes+=ConsumeForInBuilt)+
	(computeInfo+=ComputeInfoForInBuilt)+
	(generateInfo+=Generate)+;

customComputationalService:
	customComputationalServiceName=EntityName
	(consumes+=Consume)+
	(requests+=Request)*
	(generateInfo+=Generate)*
	(commands+=Command)*;

Request:
	'request' requestname=[SourceName] 'to' storageForRequest=[EntityName] ';';

ConsumeForInBuilt:
	'consume' name=[SourceName] 'from' (SensorForConsume=[EntityName]) ';';

ComputeInfoForInBuilt:
	'COMPUTE' '(' (operationName=OperationName) (',' operationParameter=INT)? ')' ';';

Consume:
	'consume' name=[SourceName] 'from' fromName=[EntityName] ';';

Command:
	'command' commandName=[ActionName] '(' (commandparameter=CommandParameter)? ')' 'to' actuatorForCommand=[EntityName]
	';';

CommandParameter:
	name=[ParameterName] (',' parameter=CommandParameter)?;

VocSpec:
	'structs:' (structs+=Struct)* 
	'resources:' 
	'sensors:'
	('periodicSensors:' (periodicSensors+=PeriodicSensors)+)*
	('eventDrivenSensors:' (eventSensors+=EventSensors)+)*
	('requestBasedSensors:' (requestSensors+=RequestSensors)+)*
	('tags:' (tags+=Tags)+)*  
	('actuators:' (actuators+=Actuator)+)*
	('storages:' (storageService+=StorageService)+)* 	
	;
	

//Region: regionLabel = RegionLabel ':' regionType = Type ';';

//RegionLabel: name = ID ;
Struct:
	name=StructEntityName (fields+=Field)+;

Field:
	name=ID ':' type+=Type ';' 
;

/* Periodic Sensor Definition */
PeriodicSensors:
	sensorName=EntityName
	(generateInfo+=Generate)+
	sampelingDef= SampelingDef
;

SampelingDef:
	'sample' 'period' INT 'for' INT ';'
;

/* Event Driven Sensor Definition */
EventSensors:
	sensorName=EntityName
	(generateInfo+=Generate)+
	onConditionDef= OnConditionDef ;

OnConditionDef:
	'onCondition' (eventConditions+=EventConditions) ';'
;

/* Request Based Sensor Definition */
RequestSensors:
	sensorName=EntityName
	(dataAccess+=DataAccessForRequestSensors)+ 
;


/* Tag Definition */
Tags:
	sensorName=EntityName
	(generateInfo+=Generate)+
	;



EventConditions:
	name=ID ('>' | '<' | '=')* (intValue=INT) (nameUnit=Unit) (',' eventConditions+=EventConditions)?
	// (name = ID)  (operation = OPERATOR) (unit= UNIT) (',' (eventConditions += EventConditions) )?
;

OPERATOR:
	opt='>' | opt='<' | opt='=';

	//EXPRESSION:
//	'a' .. 'z'

//	( 'a' .. 'z' |'A'..'Z'|'_')* ('>' | '<' | '=')* ('0'..'9')*; 
//;
 

//InBuiltComputationalServiceName : name = ID ;

//EntityNameForUserInteraction: name=('EndUserApp' | 'DashBoard');

DeviceEntityName:
	(name=ID);

StructEntityName:
	(name=ID);  
  
EntityName:
	(name=ID);
 
	//(name=ID|name = 'EndUserApp' | name = 'DashBoard'); 

	//EntityName:  (name = ID | name = 'EndUserApp' | name = 'DashBoard')  ;
Generate:
	'generate' sourceName=SourceName ':' type=Type ';';

SourceName:
	name=ID;

/* Actuator Definition */
Actuator:
	actuatorName=EntityName
	(actions += Action)*
	;


Action:
	'action' actionName=ActionName '(' (parameters+=Parameters)* ')' ';';

ActionName:
	name=ID;

Parameters:
	parameterName=ParameterName ':' type=Type;

ParameterName:
	name=ID;

/*  Storage Service Definition  */
StorageService:
	storageServiceName=EntityName
	((dataAccesses+=DataAccess))*;

DataAccessForRequestSensors:
	'generate' sourceName=SourceName ':' dataAccessType=Type
	'accessed-by' dataItem=ID ':' type=Type ';'
;


DataAccess:
	'generate' sourceName=SourceName ':' dataAccessType=Type
	'accessed-by' dataItem=ID ':' type=Type ';'
	((actions+=Action))*;

/* Type Definition */
Type:
	(primitiveDataType=PrimitiveDataType);

Unit:
	name='PPM' | name='miliseconds' | name='seconds' | name='minutes' | name='ppm';

OperationName:
	name='AVG_BY_SAMPLE';

PrimitiveDataType:
	INTEGER='Integer' | BOOLEAN='boolean' | STRING='String' | LONG='long' | DOUBLE='double' | structDef=[StructEntityName];

